{"ast":null,"code":"var _jsxFileName = \"/home/khaled/Desktop/volt-react-dashboard/src/components/Tables.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Table, Image } from '@themesberg/react-bootstrap';\nimport axios from \"axios\";\nexport const RankingTable = () => {\n  const [comments, setComments] = useState([]); // Fetch comments from the Flask API\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/get_comments?video_id=YOUR_VIDEO_ID\");\n        const data = response.data;\n\n        if (data.comments) {\n          const parsedComments = JSON.parse(data.comments);\n          setComments(parsedComments);\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    };\n\n    fetchComments();\n  }, []);\n  return /*#__PURE__*/React.createElement(Card, {\n    border: \"light\",\n    className: \"shadow-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    className: \"pb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    responsive: true,\n    className: \"table-centered table-nowrap rounded mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    className: \"thead-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, \"User\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 15\n    }\n  }, \"Comment\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }, \"Replies\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, comments.map((comment, index) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 26\n    }\n  }, comment.user_name)))), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"border-0 fw-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, comment.comment), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, new Date(comment.date).toLocaleString()), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, comment.replies.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, comment.replies.map((reply, replyIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    key: replyIndex,\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, reply))) : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \"No replies\"))))))));\n};","map":{"version":3,"sources":["/home/khaled/Desktop/volt-react-dashboard/src/components/Tables.js"],"names":["React","useEffect","useState","FontAwesomeIcon","faAngleDown","faAngleUp","Card","Table","Image","axios","RankingTable","comments","setComments","fetchComments","response","get","data","parsedComments","JSON","parse","error","console","map","comment","index","user_name","Date","date","toLocaleString","replies","length","reply","replyIndex"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Table, Image } from '@themesberg/react-bootstrap';\nimport axios from \"axios\";\n\nexport const RankingTable = () => {\n  const [comments, setComments] = useState([]);\n\n  // Fetch comments from the Flask API\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/get_comments?video_id=YOUR_VIDEO_ID\");\n        const data = response.data;\n        if (data.comments) {\n          const parsedComments = JSON.parse(data.comments);\n          setComments(parsedComments);\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    };\n\n    fetchComments();\n  }, []);\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body className=\"pb-0\">\n        <Table responsive className=\"table-centered table-nowrap rounded mb-0\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th className=\"border-0\">User</th>\n              <th className=\"border-0\">Comment</th>\n              <th className=\"border-0\">Date</th>\n              <th className=\"border-0\">Replies</th>\n            </tr>\n          </thead>\n          <tbody>\n            {comments.map((comment, index) => (\n              <tr key={index}>\n                <td className=\"border-0\">\n                  <div className=\"d-flex align-items-center\">\n                    <div><span className=\"h6\">{comment.user_name}</span></div>\n                  </div>\n                </td>\n                <td className=\"border-0 fw-bold\">{comment.comment}</td>\n                <td className=\"border-0\">{new Date(comment.date).toLocaleString()}</td>\n                <td className=\"border-0\">\n                  {comment.replies.length > 0 ? (\n                    <div>\n                      {comment.replies.map((reply, replyIndex) => (\n                        <div key={replyIndex} className=\"text-muted\">{reply}</div>\n                      ))}\n                    </div>\n                  ) : (\n                    <span className=\"text-muted\">No replies</span>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </Card.Body>\n    </Card>\n  );\n};"]},"metadata":{},"sourceType":"module"}